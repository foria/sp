
// =============================================================================
// Scaling size
// =============================================================================
@function scale-size($value) {
    $value: ($value * map-get($grid-breakpoints, xl) ) / map-get($grid-breakpoints, lg);
    @return $value;
}

@mixin responsive-size($property, $value, $unit:px) {
    #{$property}: #{$value}$unit;

    @include media-breakpoint-up(xl) {
    	#{$property}: scale-size($value);
    }
}


// =============================================================================
// Nested Maps Get value
// =============================================================================
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

// =============================================================================
// Create circle dimensions and background
// =============================================================================

@mixin do-circle($size, $bg) {
    background-color: $bg;

    @include responsive-size("width", $size );
    @include responsive-size("height", $size );
}
